
////////////////////////////////////////////////////////////////////////////////
// Обработка валют и их курсов
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает курс валюты на заданную дату. Если не найдено, то возвращает неопределено.
//
// Параметры:
//   Валюта    - СправочникСсылка.Валюты - Валюта, для которой получается курс.
//   ДатаКурса - Дата - Дата, на которую получается курс.
//
// Возвращаемое значение: 
//   Структура - Параметры курса.
//       * Курс      - Число - Курс валюты на указанную дату.
//       * Валюта    - СправочникСсылка.Валюты - Ссылка валюты.
//       * ДатаКурса - Дата - Дата получения курса.
//
Функция ПоследниеКурсыВалют(ДатаКурса) Экспорт
	
	ОсновнаяВалюта = ЗапросыВспомогательныеДанные.ПолучитьОсновнуюВалюту();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период КАК Дата,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта <> &ОснВалюта) КАК КурсыВалютСрезПоследних");
	Запрос.УстановитьПараметр("Дата",ДатаКурса);
	Запрос.УстановитьПараметр("Валюта",ОсновнаяВалюта);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Загружает из интернета курсы валют в регистр
//
Процедура ЗагрузитьКурсыВалютYahoo() Экспорт
	
	ОсновнаяВалюта = ЗапросыВспомогательныеДанные.ПолучитьОсновнуюВалюту();
	Оператор = Перечисления.ВалютныеОператоры.Yahoo;
	
	ЗагружаемыеВалюты = ПолучитьМассивЗагружаемыхВалют();
	КурсыВалют = ПолучитьКурсыВалютYahoo(ЗагружаемыеВалюты, ОсновнаяВалюта);
	
	Для Счетчик = 0 По ЗагружаемыеВалюты.Количество()-1 Цикл
		
		НаборЗаписей = РегистрыСведений.КурсыВалютОператоров.СоздатьНаборЗаписей();
		
		Валюта = ЗагружаемыеВалюты[Счетчик].Ссылка;
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		
		ОператорКурсов = Строка(Оператор);
		ДатаКурса = ПреобразованиеТипов1СКлиентСервер.ПривестиДатуОператораК1С(ОператорКурсов, КурсыВалют[Счетчик].Date);
		
		НаборЗаписей.Отбор.Период.Установить(ДатаКурса);
		НаборЗаписей.Отбор.Валюта.Установить(Валюта);
		НаборЗаписей.Отбор.Оператор.Установить(Оператор);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Валюта = Валюта;
		Запись.Период =  ДатаКурса;
		Запись.Оператор =  Оператор;
		Запись.Курс = КурсыВалют[Счетчик].Bid;
		Запись.КурсПродажи = КурсыВалют[Счетчик].Ask;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает из интернета курсы товарных рынков в регистр
//
// Параметры:
//  КлиенсткийСертификат - СертификатКлиентаФайл - сертификат клиента для запроса по защищенному соединению HTTPS
//
Процедура ЗагрузитьКурсыТоварныхРынков(КлиенсткийСертификат = Неопределено) Экспорт

	///Сейчас используем следующий сервис
	//https://www.quandl.com/blog/api-for-commodity-data - базы данных товаров
	//https://www.quandl.com/docs/api#data - апи по работе с товарами
	//ПРИМЕР запроса:
	//https://www.quandl.com/api/v3/datasets/ODA/POILBRE_USD?start_date=2015-08-30&end_date=2015-09-30&collapse=weekly
	// API key PG7-79xs8wYy-iTTqqan из логина - AccountingInvest пароля - yardteam e-mal ripreal@qip.ru
	#Если  ВебКлиент Тогда
		
		ВызватьИсключение "Нужно реализовать поддержку веб-клиента для в функции ЗагрузитьКурсыТоварныхРынков()";
		
	#Иначе
		
		ЗагружаемыеТовары = ПолучитьЗагружаемыеТовары();
		
		КонецПериода = ТекущаяДата();
		
		ПараметрыЗапроса = ИнтерфейсHTTPЗапросовСервер.ПараметрыHTTPЗапроса();
		ПараметрыЗапроса.Метод = "GET";
		ПараметрыЗапроса.Сервер = "www.quandl.com";
		ПараметрыЗапроса.Адрес = "/api/v3/datasets/%1?api_key=PG7-79xs8wYy-iTTqqan&start_date=%2&end_date=%3&collapse=daily";
		ПараметрыЗапроса.КлиенсткийСертификат = КлиенсткийСертификат;
		
		Для каждого Товар Из ЗагружаемыеТовары Цикл
			
			ТикерТовара = БазаДанныхТовара(Товар.КодНоменклатуры);
			
			ДатаНачала = ПреобразованиеТипов1СКлиентСервер.ПривестиДату1СКДатеОператора("quandl", Товар.ДатаКурса);
			ДатаОкончания = ПреобразованиеТипов1СКлиентСервер.ПривестиДату1СКДатеОператора("quandl", КонецПериода); 
			
			ПараметрыЗапроса.Адрес = СтрШаблон(ПараметрыЗапроса.Адрес,ТикерТовара, ДатаНачала, ДатаОкончания);
			
			ТекстОтвета = ИнтерфейсHTTPЗапросовСервер.ПолучитьОтветHTTPЗапросаЗащищенный(ПараметрыЗапроса);
			ИнфоКурсовТоваров = ИнтерфейсHTTPЗапросовСервер.ПрочитатьОтветHTTPЗапроса(ТекстОтвета);
			НеформатированныеКурсы = ИнфоКурсовТоваров.dataset.data;
			
			ДанныеКурсовТовара = Новый Структура("Курсы,Номенклатура,Валюта");
			ДанныеКурсовТовара.Номенклатура = Товар.Номенклатура;
			ДанныеКурсовТовара.Валюта = Товар.Валюта;
			
			ПриведенныеКурсы = Новый Массив;
			
			ТоварныйОператор = "quandl";
			Для каждого НеформатированныйКурс Из НеформатированныеКурсы Цикл
				
				ЗначениеКурсыТоваров = Новый Структура("Дата,Курс");
				ЗначениеКурсыТоваров.Дата = ПреобразованиеТипов1СКлиентСервер.ПривестиДатуОператораК1С(ТоварныйОператор, НеформатированныйКурс[0]); 
				ЗначениеКурсыТоваров.Курс = Число(НеформатированныйКурс[1]);
				
				ПриведенныеКурсы.Добавить(ЗначениеКурсыТоваров);
					
			КонецЦикла;
			
			ДанныеКурсовТовара.Курсы = ПриведенныеКурсы;
			
			ЗаписатьКурсыТоваровСРынка(ДанныеКурсовТовара);
			
		КонецЦикла;
		
	#КонецЕсли
	
КонецПроцедуры

// Т.к. в выходные биржа закрыта то функция получает курс в эти дни на пятницу,
// в противном случае возвращается дата без изменений
//
// Параметры:
//  Дата - Дата - дата относительно которой рассчитывается рабочая.
// 
// Возвращаемое значение:
//  Дата -  дата, в котороую биржа работает
//
Функция РабочийДеньБиржы(ВходнаяДата) Экспорт
	
	Сутки = 86400;
	ДеньДаты = ДеньНедели(ВходнаяДата);
	Если ДеньДаты = 7 Тогда
		ПредыдущийДень = Сутки *2;
	ИначеЕсли ДеньДаты = 6 Тогда
		ПредыдущийДень = Сутки;
	Иначе
		ПредыдущийДень = 0;
	КонецЕсли;
	
	Возврат НачалоДня(КонецДня(ВходнаяДата)-ПредыдущийДень);
	
КонецФункции

// Функция возвращает параметры актуальности курсов
// 
// Возвращаемое значение:
//  Структура - содержит следующие значения:
//   * КурсАктуален - Булево - признак актуальности курса.
//   * ДатаАктуальности - Дата - дата на которую был получен последний курс.
//
Функция ПараметрыАктуальностиКурсовВалют() Экспорт
	
	// Для курсов валют разрешены итоги (срез последних), поэтому по стандартам передавать
	// в запрос курсов валют параметр с сегодняшней датой не надо.
	Результат = Новый Структура;
	Результат.Вставить("КурсАктуален", Ложь);
	Результат.Вставить("ДатаАктуальности", Дата("00010101"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВалюты
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И Валюты.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(КурсыВалютСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					втВалюты.Ссылка
	|				ИЗ
	|					втВалюты КАК втВалюты)) КАК КурсыВалютСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	Если Выборка.Следующий() Тогда
		
		Если Выборка.Период = ДатаСегодня Тогда
			Результат.КурсАктуален = Истина;
			Результат.ДатаАктуальности = ДатаСегодня;
		Иначе
			Результат.КурсАктуален = Ложь;
			Результат.ДатаАктуальности = Выборка.Период;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаКурсовТоварныхРынков

Функция БазаДанныхТовара(КодТовара)
	
	Если ВРЕГ(КодТовара) = "BCO"  Тогда
		Возврат "ODA/POILBRE_USD";
	КонецЕсли;
	
КонецФункции

// Процедура записывает курсы товаров в регистр на основании структуры курсов товара.
//
// Параметры:
//  КурсыТоваров - Структура - Содержит следующие свойства:
//    *Курсы        - Массив - состоит из структуры с ключами Дата и Курс.
//    *Номенклатура - СправочникСсылка.Номенклатура - номенклатура по которой загружается курс.
//    *Валюта       - СправочникСсылка.Валюты - валюты номенклатуры.
//
Процедура ЗаписатьКурсыТоваровСРынка(КурсыТоваров)
	
	Для каждого ДанныеКурса Из КурсыТоваров.Курсы Цикл
		
		ДанныеДляЗаписи = РегистрыСведений.КурсыТоварныхРынков.СоздатьНаборЗаписей();
		
		ДанныеДляЗаписи.Отбор.Период.Установить(ДанныеКурса.Дата);
		ДанныеДляЗаписи.Отбор.Валюта.Установить(КурсыТоваров.Валюта);
		ДанныеДляЗаписи.Отбор.Номенклатура.Установить(КурсыТоваров.Номенклатура);
		
		СтрокаДанных = ДанныеДляЗаписи.Добавить();
		СтрокаДанных.Номенклатура = КурсыТоваров.Номенклатура;
		СтрокаДанных.Валюта = КурсыТоваров.Валюта;
		СтрокаДанных.Курс = ДанныеКурса.Курс;
		СтрокаДанных.Период = ДанныеКурса.Дата;
		
		ДанныеДляЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаКурсовYahoo

// Получает курсы валют из интернета
//
// Параметры:
//  ЗагружаемыеВалюты	 - 	 - 
//  ОсновнаяВалюта		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьКурсыВалютYahoo(ЗагружаемыеВалюты, ОсновнаяВалюта)
	
	ПараметрыЗапроса = ИнтерфейсHTTPЗапросовСервер.ПараметрыHTTPЗапроса();
	ПараметрыЗапроса.Метод = "GET";
	ПараметрыЗапроса.Сервер = "query.yahooapis.com";
	
	// #Currency - параметр запроса, представляющий межд. имена валютных пар, черз запятую без пробелов. 
	//Пример USDRUB,EURRUB
	ШаблонАдресаЗапроса = "/v1/public/yql?q=select+*+from+yahoo.finance.xchange+where+pair+=+%22#Currency%22&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=";
	КодОсновнойВалюты = ОсновнаяВалюта.Наименование;
	СтрокаПараметровАдреса = "";
	Для каждого Валюты Из ЗагружаемыеВалюты Цикл
		
		ВалютнаяПара = Валюты.Наименование + КодОсновнойВалюты;
		СтрокаПараметровАдреса = СтрокаПараметровАдреса + ?(СтрокаПараметровАдреса="", ВалютнаяПара, "," + ВалютнаяПара);
		
	КонецЦикла;
	
	ПараметрыЗапроса.Адрес = СтрЗаменить(ШаблонАдресаЗапроса, "#Currency", СтрокаПараметровАдреса);

	ОтветСтрока = ИнтерфейсHTTPЗапросовСервер.ПолучитьОтветHTTPЗапроса(ПараметрыЗапроса);
	
	НеформатированныеВалюты = ИнтерфейсHTTPЗапросовСервер.ПрочитатьОтветHTTPЗапроса(ОтветСтрока);
	
	ПрочитанныеВалюты = НеформатированныеВалюты.query.results.rate;
	
	Возврат ПрочитанныеВалюты;
	
КонецФункции

// Возвращает формат результата запроса select * from yahoo.finance.xchange
// Пример:
// "id": "USDRUB",
// "Name": "USD/RUB",
// "Rate": "64.3321",
// "Date": "10/29/2015",
// "Time": "10:14am",
// "Ask": "64.3451",
// "Bid": "64.3321"
Функция РезультатЗапросаXchange();
	
	РезультатЗапросаXchange = Новый Структура;
	РезультатЗапросаXchange.Вставить("id");
	РезультатЗапросаXchange.Вставить("Name");
	РезультатЗапросаXchange.Вставить("Rate");
	РезультатЗапросаXchange.Вставить("Date");
	РезультатЗапросаXchange.Вставить("Time");
	РезультатЗапросаXchange.Вставить("Ask");
	РезультатЗапросаXchange.Вставить("Bid");
	
	Возврат РезультатЗапросаXchange; 
	
КонецФункции

#КонецОбласти

Функция ПолучитьМассивЗагружаемыхВалют()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Валюты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.СпособУстановкиКурса = ЗНАЧЕНИЕ(Перечисление.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета)
	|	И НЕ Валюты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.НаименованиеПолное";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьЗагружаемыеТовары() 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КурсыТоварныхРынков.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(КурсыТоварныхРынков.Период) КАК ДатаКурса,
	|	КурсыТоварныхРынков.Валюта КАК Валюта,
	|	КурсыТоварныхРынков.Номенклатура.Код КАК КодНоменклатуры
	|ИЗ
	|	РегистрСведений.КурсыТоварныхРынков КАК КурсыТоварныхРынков
	|ГДЕ
	|	КурсыТоварныхРынков.Номенклатура.ЗагружаетсяИзИнтернета = ИСТИНА
	|	И НЕ КурсыТоварныхРынков.Номенклатура.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыТоварныхРынков.Номенклатура,
	|	КурсыТоварныхРынков.Валюта";
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Выборка);
	
КонецФункции
