
#Область ПрограммныйИнтерфейс

Процедура СформироватьОтчет(СхемаКомпоновкиДанных, ТабДок) Экспорт
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	//Помещаем в переменную данные о расшифровке данных - здесь ненужный пункт, но пусть будет.
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабДок);

	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Процедура УстановитьПользовательскийПараметр(Отчет, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для каждого ПользовательскийПараметр Из Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользовательскийПараметр.Параметр = Параметр тогда
			ПользовательскийПараметр.Значение = ЗначениеПараметра;
			ПользовательскийПараметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

Функция НайтиПользовательскийПараметр(КомпоновщикНастроек, ИмяПараметра) Экспорт
	
	Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для каждого ПользовательскийПараметр Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ПользовательскийПараметр.Параметр = Параметр тогда
			Возврат ПользовательскийПараметр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура НазначитьОформлениеВалютыДиаграммы(Настройки, Валюта, ИмяПоляВалюты, ОформляемоеПоле = Неопределено) Экспорт
	
	Если ОформляемоеПоле = Неопределено Тогда
		ОформляемоеПоле = ИмяПоляВалюты;
	КонецЕсли;
	
	ЦветСост = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Валюта, "ЦветR, ЦветG, ЦветB");
	ЦветВалюты = Новый Цвет(ЦветСост.ЦветR, ЦветСост.ЦветG, ЦветСост.ЦветB);
	
	ЭлементУО = ДобавитьЭлементУО(Настройки, ОформляемоеПоле, "ЦветВДиаграмме", ЦветВалюты);
	УстановитьОтбор(ЭлементУО.Отбор, ИмяПоляВалюты, Валюта);
	
КонецПроцедуры

#КонецОбласти

Функция ДобавитьЭлементУО(Настройки, ОформляемоеПоле, Параметр, ЗначениеПараметра) 
	
	ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра(Параметр, ЗначениеПараметра);
	ПолеКомпоновки = ЭлементУО.Поля.Элементы.Добавить();
	//ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
	Возврат ЭлементУО;
	
КонецФункции

Процедура УстановитьОтбор(Отбор, ЛевоеЗначение, ПравоеЗначение) 
	
	// Отбор
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
КонецПроцедуры

