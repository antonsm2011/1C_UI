
////////////////////////////////////////////////////////////////////////////////
// Абстрактный класс с интерфейсом  и фабрика для создания разных видов дашбордов
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейсФабрики

// Создает экземпляр конкретного дашборда по переданному виду.
//
// Параметры:
//  Вид - Строка - наименование создаваемого дашборда.
// 
// Возвращаемое значение:
//  Структура -  созданный экземпляр дашборда.
//
Функция Создать(Вид) экспорт
	
	ДашбордОбъект = Новый Структура ("Модуль, ТипДиаграммы, Вид, Параметры, Результат, ПриватныеСвойства");
	
	ДашбордОбъект.ТипДиаграммы      = Неопределено;
	
	ДашбордОбъект.Вид               = ПолучитьВидДашборда(Вид);
	
	ДашбордОбъект.Модуль            = "Дашборды"+ДашбордОбъект.Вид;
	ДашбордОбъект.Параметры         = Новый Структура;
	ДашбордОбъект.Результат         = Неопределено;
	ДашбордОбъект.ПриватныеСвойства = Новый Структура;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(ДашбордОбъект.Модуль);

	Модуль.Создать(ДашбордОбъект);
	
	Возврат ДашбордОбъект;
	
КонецФункции

// Формирует и выводит результат дашборда в свойство Результат.
//
// Параметры:
//  ДашбордОбъект - Структура - см. возврашаемое значение функции Создать().
//
Процедура СФормировать(ДашбордОбъект) Экспорт
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(ДашбордОбъект.Модуль);

	Модуль.Сформировать(ДашбордОбъект);
	
КонецПроцедуры

// Отображает в форме результат формирования дашборда
//
// Параметры:
//  Форма         - УправляемаяФорма - Форма, на которой требуется разместить дашборд.
//  ДашбордОбъект - Структура - см. возврашаемое значение функции Создать().
//
Процедура РазместитьВИнтерфейсе(Форма, ДашбордОбъект) Экспорт
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(ДашбордОбъект.Модуль);
	
	Модуль.РазместитьВИнтерфейсе(Форма, ДашбордОбъект);
	
КонецПроцедуры

Функция Сериализовать(ДашбордОбъект) Экспорт
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(ДашбордОбъект.Модуль);
	
	Возврат Модуль.Сериализовать(ДашбордОбъект);
	
КонецФункции

#КонецОбласти

#Область СервисМенеджера

Функция ПолучитьВсе() Экспорт

	ВсеДашборды = Новый СписокЗначений;
	
	Для каждого ВидДашборда Из Перечисления.ВидыДашбордов Цикл
		
		МетаданноеДашборд =  МетаданноеДашборда(ВидДашборда);
		
		ВсеДашборды.Добавить(МетаданноеДашборд.Имя, МетаданноеДашборд.Синоним);
		
	КонецЦикла;
	
	Возврат ВсеДашборды;
	
КонецФункции

Функция ПолучитьСтандартные() Экспорт
	
	ПолучитьСтандартные = Новый СписокЗначений;
	
	Для каждого ВидДашборда Из Перечисления.ВидыДашбордов Цикл
		
		Если ВидДашборда = Перечисления.ВидыДашбордов.ДвижениеДенежныхСредств Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданноеДашборд =  МетаданноеДашборда(ВидДашборда);
		
		ПолучитьСтандартные.Добавить(МетаданноеДашборд.Имя, МетаданноеДашборд.Синоним);
		
	КонецЦикла;
	
	Возврат ПолучитьСтандартные;
	
КонецФункции

Функция ПолучитьНеактивные(Активные) Экспорт
	
	Неактивные = ПолучитьВсе();
	
	Для Каждого Дашборд Из Активные Цикл
		
		Найденный = Неактивные.НайтиПоЗначению(Дашборд.Значение);
		
		Если Найденный <> Неопределено Тогда
			Неактивные.Удалить(Найденный);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неактивные;
	
КонецФункции

Функция СериализацияНедопустимыеТипы(Свойство, Значение, ДопПараметры, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип ("ФорматированнаяСтрока") Тогда
		Возврат Строка(Значение);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МетаданноеДашборда(СсылкаНаПеречисление)
	
	ИндексВСписке = Перечисления.ВидыДашбордов.Индекс(СсылкаНаПеречисление);
	Возврат Метаданные.Перечисления.ВидыДашбордов.ЗначенияПеречисления[ИндексВСписке];
	
КонецФункции

Функция ПолучитьВидДашборда(Вид)
	
	Если ТипЗнч(Вид) = Тип("Строка") Тогда
		Возврат Вид;
	ИначеЕсли ТипЗнч(Вид) = Тип("ПеречислениеСсылка.ВидыДашбордов") Тогда
		Метаданное = МетаданноеДашборда(Вид);
		Возврат Метаданное.Имя;
	Иначе
		ВызватьИсключение "Вид дашборда должен быть или строкой или типа ПеречислениеСсылка.ВидыДашбордов";
	КонецЕсли;
	
КонецФункции // ПолучитьВидДашборда(Вид)()


#КонецОбласти

